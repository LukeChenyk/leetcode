#pragma once
#include <iostream>

using namespace std;


//运用你所掌握的数据结构，设计和实现一个  LRU(最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。
//
//获取数据 get(key) - 如果密钥(key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 - 1。
//写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。
//你是否可以在 O(1) 时间复杂度内完成这两种操作？



class LRUCache
{

private:
	int capacity;
	/*hash_map<int, int> intHashMap;
	hash_map<int, int> useCountHashMap;*/
public:
	LRUCache(int capacity);


	int get(int key);

	void put(int key, int value);

	~LRUCache();
};

